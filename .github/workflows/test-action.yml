name: Test GitHub action

on:
  workflow_run:
    workflows: [
      "Markdown Link Check with errors",
      "Markdown Link Check without errors",
    ]
    types:
    - completed

defaults:
  run:
    shell: pwsh

jobs:
  only-errors-true:
    name: only-errors set to true
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Dump github co ntext for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - uses: actions/checkout@v3
    - name: Run markdown link check log parser with only errors set to true
      id: mlc-log-parser-1
      uses: ./
      with:
        auth-token:  '${{ secrets.GITHUB_TOKEN }}'
        repo: '${{ github.repository }}'
        run-id: '${{ github.event.workflow_run.id }}'
        job-name: 'Run Markdown Link Check'
        step-name: 'Markdown Link Check'
        only-errors: 'true'
        output: 'step-json, file-json, file-md'
        json-filepath: './mlc-json-result-1.json'
        markdown-filepath: './mlc-md-result-1.md'
    - name: Dump outputs from previous step
      run: |
        $result = '${{ steps.mlc-log-parser-1.outputs.mlc-result }}' | ConvertFrom-Json
        Write-Output "Total files checked: $($result.TotalFilesChecked)"
        Write-Output "Total links chedked: $($result.TotalLinksChecked)"
        Write-Output "Has erros: $($result.HasErrors)"
        $resultAsJsonIndented = ConvertTo-Json -Depth 4 $result 
        Write-Output $resultAsJsonIndented # outputs the markdown link check result as an indented JSON string
    - name: Verify json file output for mlc with errors
      if: github.event.workflow_run.name == 'Markdown Link Check with errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/with-errors/result-with-capture-errors-only.json
        $file2 = Get-Content ${{ github.workspace }}/mlc-json-result-1.json        
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output JSON file doesn't match expected JSON file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output JSON file matches expected JSON file."
        }
    - name: Verify md file output for mlc with errors
      if: github.event.workflow_run.name == 'Markdown Link Check with errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/with-errors/result-with-capture-errors-only.md
        $file2 = Get-Content ${{ github.workspace }}/mlc-md-result-1.md
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output Markdown file doesn't match expected Markdown file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output Markdown file matches expected Markdown file."
        }
    - name: Verify json file output for mlc without errors
      if: github.event.workflow_run.name == 'Markdown Link Check without errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/without-errors/result.json
        $file2 = Get-Content ${{ github.workspace }}/mlc-json-result-1.json
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output JSON file doesn't match expected JSON file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output JSON file matches expected JSON file."
        }
    - name: Verify md file output for mlc without errors
      if: github.event.workflow_run.name == 'Markdown Link Check without errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/without-errors/result.md
        $file2 = Get-Content ${{ github.workspace }}/mlc-md-result-1.md
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output Markdown file doesn't match expected Markdown file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output Markdown file matches expected Markdown file."
        }
  
  only-errors-false:
    name: only-errors set to true
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Dump github co ntext for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - uses: actions/checkout@v3
    - name: Run markdown link check log parser with only errors set to false
      id: mlc-log-parser-2
      uses: ./
      with:
        auth-token:  '${{ secrets.GITHUB_TOKEN }}'
        repo: '${{ github.repository }}'
        run-id: '${{ github.event.workflow_run.id }}'
        job-name: 'Run Markdown Link Check'
        step-name: 'Markdown Link Check'
        only-errors: 'false'
        output: 'step-json, file-json, file-md'
        json-filepath: './mlc-json-result-2.json'
        markdown-filepath: './mlc-md-result-2.md'
    - name: Dump outputs from previous step
      run: |
        $result = '${{ steps.mlc-log-parser-2.outputs.mlc-result }}' | ConvertFrom-Json
        Write-Output "Total files checked: $($result.TotalFilesChecked)"
        Write-Output "Total links chedked: $($result.TotalLinksChecked)"
        Write-Output "Has erros: $($result.HasErrors)"
        $resultAsJsonIndented = ConvertTo-Json -Depth 4 $result 
        Write-Output $resultAsJsonIndented # outputs the markdown link check result as an indented JSON string
    - name: Verify json file output for mlc with errors
      if: github.event.workflow_run.name == 'Markdown Link Check with errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/with-errors/result-without-capture-errors-only.json
        $file2 = Get-Content ${{ github.workspace }}/mlc-json-result-2.json
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output JSON file doesn't match expected JSON file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output JSON file matches expected JSON file."
        }
    - name: Verify md file output for mlc with errors
      if: github.event.workflow_run.name == 'Markdown Link Check with errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/with-errors/result-without-capture-errors-only.md
        $file2 = Get-Content ${{ github.workspace }}/mlc-md-result-2.md
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output Markdown file doesn't match expected Markdown file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output Markdown file matches expected Markdown file."
        }
    - name: Verify json file output for mlc without errors
      if: github.event.workflow_run.name == 'Markdown Link Check without errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/without-errors/result.json
        $file2 = Get-Content ${{ github.workspace }}/mlc-json-result-2.json
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output JSON file doesn't match expected JSON file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output JSON file matches expected JSON file."
        }
    - name: Verify md file output for mlc without errors
      if: github.event.workflow_run.name == 'Markdown Link Check without errors'
      run: |
        $file1 = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/without-errors/result.md
        $file2 = Get-Content ${{ github.workspace }}/mlc-md-result-2.md
        $compareResult = Compare-Object -ReferenceObject $file1 -DifferenceObject $file2
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Output Markdown file doesn't match expected Markdown file. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Output Markdown file matches expected Markdown file."
        }

  md-step-output:
    name: md step output
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Dump github co ntext for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - uses: actions/checkout@v3
    - name: Run markdown link check log parser with markdown step output
      id: mlc-log-parser-3
      uses: ./
      with:
        auth-token:  '${{ secrets.GITHUB_TOKEN }}'
        repo: '${{ github.repository }}'
        run-id: '${{ github.event.workflow_run.id }}'
        job-name: 'Run Markdown Link Check'
        step-name: 'Markdown Link Check'
        only-errors: 'false'
        output: 'step-md'
        json-filepath: './mlc-json-result-3.json'
        markdown-filepath: './mlc-md-result-3.md'
    - name: Dump outputs from previous step
      run: |
        Write-Output "${{ steps.mlc-log-parser-3.outputs.mlc-result }}"
    - name: Verify md file output for mlc with errors
      if: github.event.workflow_run.name == 'Markdown Link Check with errors'
      run: |
        $file = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/with-errors/result-without-capture-errors-only.md -Raw
        $stepOutput = "${{ steps.mlc-log-parser-3.outputs.mlc-result }}"
        $compareResult = Compare-Object -ReferenceObject $file -DifferenceObject $stepOutput
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Markdown step output doesn't match expected Markdown. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Markdown step output matches expected Markdown."
        }   
    - name: Verify md file output for mlc without errors
      if: github.event.workflow_run.name == 'Markdown Link Check without errors'
      run: |
        $file = Get-Content ${{ github.workspace }}/.github/workflows/markdown-link-check-files/expected-file-outputs/without-errors/result.md  -Raw
        $stepOutput = "${{ steps.mlc-log-parser-3.outputs.mlc-result }}"
        $compareResult = Compare-Object -ReferenceObject $file -DifferenceObject $stepOutput
        Write-Output $compareResult
        Write-Output ''
        if($compareResult)
        {
          Write-Output "::error::Markdown step output doesn't match expected Markdown. See failed step for more information."
          Exit 1
        }
        else
        {
          Write-Output "Markdown step output matches expected Markdown."
        }

  default-args:
    name: default args
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Dump github co ntext for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - uses: actions/checkout@v3
    - name: Run markdown link check log parser with default action args
      uses: ./
      id: mlc-log-parser-4
      with:
        auth-token:  '${{ secrets.GITHUB_TOKEN }}'
        repo: '${{ github.repository }}'
        run-id: '${{ github.event.workflow_run.id }}'
        job-name: 'Run Markdown Link Check'
        step-name: 'Markdown Link Check'
    - name: Dump outputs from previous step
      run: |
        $result = '${{ steps.mlc-log-parser-4.outputs.mlc-result }}' | ConvertFrom-Json
        Write-Output "Total files checked: $($result.TotalFilesChecked)"
        Write-Output "Total links chedked: $($result.TotalLinksChecked)"
        Write-Output "Has erros: $($result.HasErrors)"
        $resultAsJsonIndented = ConvertTo-Json -Depth 4 $result 
        Write-Output $resultAsJsonIndented # outputs the markdown link check result as an indented JSON string

  test-failure:
    name: test failure
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Dump github co ntext for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - uses: actions/checkout@v3
    - name: Run markdown link check log parser with bad input
      id: mlc-log-parser-bad-input
      uses: ./
      continue-on-error: true
      with:
        auth-token:  '${{ secrets.GITHUB_TOKEN }}'
        repo: '${{ github.repository }}'
        run-id: '1' # invalid run id
        job-name: 'Run Markdown Link Check'
        step-name: 'Markdown Link Check'
    - name: The action should fail the step if it encounters an error
      run: |
        $errorOutcome = '${{ steps.mlc-log-parser-bad-input.outcome }}'
        if($errorOutcome -eq 'success') {
          Write-Output "::error title=Action check:Action should have failed the workflow because of invalid input but it didn't."
          Exit 1
        }
        else {
          Write-Output "::notice title=Action check::Action would have failed the workflow given invalid input. You should see an error message on the action's Annotations."
        }

  pr-status:
    name: Set PR status
    needs: [
      only-errors-true,
      only-errors-false,
      md-step-output,
      default-args,
      test-failure,
    ]
    if: github.event.workflow_run.event == 'pull_request' && always()
    permissions:
      statuses: write
    runs-on: ubuntu-latest
    steps:
    - name: Dump github co ntext for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - uses: actions/checkout@v3
    - name: Create GitHub status on PR
      run: |
        $onlyErrorsTrueJobResult = '${{ needs.only-errors-true.result }}'
        $onlyErrorsFalseJobResult = '${{ needs.only-errors-false.result }}'
        $mdStepOutputJobResult = '${{ needs.md-step-output.result }}'
        $defaultArgsJobResult = '${{ needs.default-args.result }}'
        $testFailureJobResult = '${{ needs.test-failure.result }}'

        if ($onlyErrorsTrueJobResult -eq 'success' `
            && $onlyErrorsFalseJobResult -eq 'success' `
            && $mdStepOutputJobResult -eq 'success' `
            && $defaultArgsJobResult -eq 'success' `
            && $testFailureJobResult -eq 'success')
        {
          $description = 'Successful'
          $state = 'success'
        }
        else
        {
          $description = 'Error'
          $state = 'error'
        }


        $uri = "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.workflow_run.head_sha }}"
        $headers = @{
          Accept = "application/vnd.github.v3+json"
          Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"
        }
        $body = @{
          context = '${{ github.workflow }} / ${{ github.event.workflow_run }} (${{ github.event_name }})' # mimic format from github
          description = $description
          target_url = 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          state = $state
        } | ConvertTo-Json -compress

        Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body
